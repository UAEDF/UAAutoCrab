#!/bin/bash

###  COLORS
BLUE='\033[1;34m'
CYAN='\033[1;36m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YEL='\033[1;33m'
YEL=$BLUE
DEF='\033[0;m'

trap ctrl_c INT SIGINT SIGTERM

autocrab_path=`dirname $0`/..
pnfs_base_dir=/pnfs/iihe/cms/store/user/$USER/

usage(){
  cat $autocrab_path/man/crabstat.man
  exit
}


lock(){
  if [ -f $autocrab_path/.lock_crabstat ];then
    echo "Another instance of crabstat is already running, so wait for it to finish !"
    echo "In case it is really not the case (like you previously killed it), do a \"crabstat -clear\""
    exit
  else
    touch $autocrab_path/.lock_crabstat
  fi
}

unlock(){
  rm -f $autocrab_path/.lock_crabstat
}

clear(){
  unlock
  
  rm -f $autocrab_path/.crabstat_*
  exit
}

set_vars(){

  username=`whoami`
  tmp_file='/tmp/ongocrabjob.'$username
  tmp_file2='/tmp/ongocrabjob2.'$username
  touch $tmp_file

  autosub_db=`dirname $0`'/../config/autosub.conf'
  ongoing_db=`dirname $0`'/../'`( cat $autosub_db | grep ongoing_db | awk '{print $2}' )`

  workdir=$HOME'/'`( cat $autosub_db | grep workdir_crab | awk '{print $2}' )`
  jobdir_crab=$HOME'/'`( cat $autosub_db | grep jobdir_crab | awk '{print $2}' )`



}

print_db(){
  echo -e "Printing Ongoing Jobs in DB ==>"

  get_all_jobs
  
  for jobtmp in $jobs ; do
    get_job $jobtmp
    
    echo -e "\n              ####################################################"
    echo -e "$basedir$uidir"
  done
  
}

print_info(){

  get_all_jobs
  
  for jobtmp in $jobs ; do
    get_job $jobtmp
    
    print_job_info
  done
  
}

get_all_jobs(){
  cd $workdir
  jobs=`( cat $ongoing_db | grep -v "#" | sed 's: :###:g' )`
  njobs=`cat $ongoing_db | grep -v "#"|wc -l`
  basedir=$jobdir_crab
}

get_job(){
  uidir=`(echo $1 | awk -F'###' '{print $3}')`   
  type=`(echo $1 | awk -F'###' '{print $4}')`
  t2dir=`echo "$pnfs_base_dir/data/$uidir" | awk -F'/ui' '{print $1}'`
  crab_cfg=$basedir$uidir/share/crab.cfg
  crab_status_output=$basedir$uidir/../crab_status_output
  #crab_status_command="$(crab -status -c $basedir$uidir) > $crab_status_output"
  user_remote_dir=`cat $crab_cfg|sed 's: ::g'|grep "user_remote_dir="|awk -F'=' '{print $2}'`
  cmssw_version=`echo $user_remote_dir|awk -F'/' '{print $2}'`
  tag=`echo $user_remote_dir|awk -F'/' '{print $3}'`
  dataset=`echo $user_remote_dir|awk -F'/' '{print $4}'`
  
  #file_pattern=$tag'__'$cmssw_version$dataset'_'
  file_pattern=`cat $crab_cfg|sed 's: ::g'|grep "output_file="|awk -F'=' '{print $2}'|sed 's:.root::'`'_'
  
  nfiles=-1
  if [ -d $t2dir ];then nfiles=`ls $t2dir|wc -l`;fi 
}

start_all_status(){
  i=0
  for job in $jobs ; do
    get_job $job

    print_job_status &
    
    pid=$!
    all_pids="$all_pids $pid"
    
    i=`expr $i + 1`
    
  done
  wait $all_pids
}

get_status_from_log(){

  if [ ! -f $crab_status_output ];then
    crab -status -c $basedir$uidir > $crab_status_output
  fi

}

get_status_from_log2(){
  log=$uidir/log/crab.log
  cat $log > $tmp_file1
  
  while [ `cat $tmp_file1|wc -l` -ne `cat $tmp_file2|wc -l` ];do
    cat $tmp_file2 > $tmp_file1
    cat $tmp_file1 | sed '1,/Checking the / d' > $tmp_file2
  done
  
  cat $tmp_file2
  
  exit
}


print_job_status(){
  stat_file=$crab_status_output
  parsed_file=$autocrab_path/.crabstat_parsed_$i
  tmp_file1=$autocrab_path/.crabstat_tmp1_$i
  tmp_file2=$autocrab_path/.crabstat_tmp2_$i
  touch $parsed_file $tmp_file1 $tmp_file2
  
  if [ $type = "GRID" ]; then
    if [ $fromLog -eq 0 ];then crab -status -c $basedir$uidir > $crab_status_output
    else  get_status_from_log 
    fi
  else
    cd $basedir$uidir
    crab -status  > $stat_file
    cat $stat_file
  fi
  
  if [ $v -eq 0 ];then parse_xav > $parsed_file
  elif [ $v -eq 1 ];then parse_status > $parsed_file
  else echo "Output version is not understood" ; exit ;
  fi
  #echo $parsed: ;cat $parsed_file
  add_to_printout $parsed_file
}

print_job_info(){

  echo -e "\n\n"
  echo -e "*********************************************************************************************"
  echo -e "*********************************************************************************************\n"
  echo "cmssw version :    "$cmssw_version
  echo "tag :              "$tag
  echo "dataset :          "$dataset|sed 's:__:/:g'
  echo "t2dir :            "$t2dir
  echo "file_pattern :     "$file_pattern
  echo "crab_cfg :         "$crab_cfg
  echo "crab ui dir :      "$basedir$uidir
  echo "nfiles :           "$nfiles

}

parse_status(){

  print_job_info


  cat $stat_file |grep Aborted > $tmp_file1
  cat $stat_file |grep Cancelled >> $tmp_file1
  cat $stat_file |grep Ready >> $tmp_file1
  cat $stat_file |grep Done >> $tmp_file1
  cat $stat_file |grep Retrieved >> $tmp_file1
  cat $stat_file |grep Scheduled >> $tmp_file1
  cat $stat_file |grep Running >> $tmp_file1
  cat $stat_file |grep Submitted >> $tmp_file1
  cat $tmp_file1 |grep -v -e ">>>"  |grep -v -e "List of jobs" > $tmp_file2
  mv $tmp_file2 $tmp_file1

  if [ `cat $tmp_file1|wc -l` -eq 0 ];then cat $stat_file; exit ;fi

  echo
  echo "---------------------------------------------------------------------------------------------------------------------------------"
  printf "%-33s %-12s %-10s %-8s %-12s %-10s %-10s %-8s %-12s %s \n" "Site" "Submitted" "Cancelled" "ready" "scheduled" "running" "aborted" "done" "retrieved" "total"
  echo "---------------------------------------------------------------------------------------------------------------------------------"

  tot_running=0
  tot_aborted=0
  tot_cancelled=0
  tot_ready=0
  tot_done=0
  tot_retrieved=0
  tot_scheduled=0
  tot_submitted=0
  tot_tot=0

  blacklist=""
  while [ `cat $tmp_file1|wc -l` -gt 0 ];do
    current=`head -n 1 $tmp_file1|awk '{print $5}'`
    #echo $current

    cat $tmp_file1|grep -v -e "$current" > $tmp_file2
    n_running=`cat $tmp_file1|grep -e "$current"|grep Running|wc -l`
    n_aborted=`cat $tmp_file1|grep -e "$current"|grep Aborted|wc -l`
    n_cancelled=`cat $tmp_file1|grep -e "$current"|grep Cancelled|wc -l`
    n_ready=`cat $tmp_file1|grep -e "$current"|grep Ready|wc -l`
    n_done=`cat $tmp_file1|grep -e "$current"|grep Done|wc -l`
    n_retrieved=`cat $tmp_file1|grep -e "$current"|grep Retrieved|wc -l`
    n_scheduled=`cat $tmp_file1|grep -e "$current"|grep Scheduled|wc -l`
    n_submitted=`cat $tmp_file1|grep -e "$current"|grep Submitted|wc -l`
    n_tot=`expr $n_submitted + $n_cancelled + $n_ready + $n_scheduled + $n_running + $n_aborted + $n_done + $n_retrieved`
  
    r_aborted=`echo "scale=2;$n_aborted/$n_tot" |bc -l`
    if [ `echo "$r_aborted>0.5"|bc` -eq 1 ];then
      blacklist="$blacklist,$current"
    fi
  
  
    tot_running=`expr $tot_running + $n_running`
    tot_aborted=`expr $tot_aborted + $n_aborted`
    tot_cancelled=`expr $tot_cancelled + $n_cancelled`
    tot_ready=`expr $tot_ready + $n_ready`
    tot_done=`expr $tot_done + $n_done`
    tot_retrieved=`expr $tot_retrieved + $n_retrieved`
    tot_scheduled=`expr $tot_scheduled + $n_scheduled`
    tot_submitted=`expr $tot_submitted + $n_submitted`
    tot_tot=`expr $tot_tot + $n_tot`

  
    printf "%-37s %-11s %-9s %-10s %-10s %-10s %-10s %-10s %-10s %s \n" "$current" "$n_submitted" "$n_cancelled" "$n_ready" "$n_scheduled" "$n_running" "$n_aborted" "$n_done" "$n_retrieved" "$n_tot"  
  
    #cat crab_rest
    mv $tmp_file2 $tmp_file1
  done

  echo "---------------------------------------------------------------------------------------------------------------------------------"
  printf "%-33s %-3s %-11s %-9s %-10s %-10s %-10s %-10s %-10s %-10s %s \n" "" "=" "$tot_submitted" "$tot_cancelled" "$tot_ready" "$tot_scheduled" "$tot_running" "$tot_aborted" "$tot_done" "$tot_retrieved" "$tot_tot"  
  echo

  blacklist=`echo ce_black_list=$blacklist|sed 's#=,#=#'|sed 's# ##g'`
  if [ "$blacklist" != "ce_black_list=" ];then echo -e "You should add the following line in the [GRID] section:\n$blacklist\nto `pwd`/share/crab.cfg\n";fi


  cat $stat_file|grep -e ">>>" -e "List of jobs"
  
  
  #canceled jobs:
  cancelled_jobs=`cat $crab_status_output|grep "Cancelled"|awk '{print $1}'` 
  cancelled_jobs=`echo $cancelled_jobs|sed 's: :,:g'`
  echo -e "\nCommands to run:"
  if [ "$cancelled_jobs" != "" ];then
    echo "  crab -forceResubmit $cancelled_jobs"
  fi
  
  if [ -d $t2dir ];then list; fi

}

parse_xav(){

  echo $uidir
  echo '--------------------------------------------------------------------------------------------'
  
  # Set loop separator to end of line
  BAKIFS=$IFS
  IFS=$(echo -en "\n\b")
  exec 3<&0
  exec 0<"$stat_file"
  start=0
  while read -r line
  do
    line2='AA'$line
    if [ $line2 = 'AA' ];then
      start=0
    fi
    if [ $start = 1 ];then
      echo $line >> $tmp_file2
    fi
    if [ $line2 = 'AA----- --- ----------------- ------------  ---------- ----------- ---------' ];then
#   if [ $line2 = 'AA--------------------------------------------------------------------------------------------' ];then
      start=1
    fi  
  done
  exec 0<&3
  # restore $IFS which was used to determine what the field separators are
  IFS=$BAKIFS
  
  nJobs=$(cat $tmp_file2 | grep -v "\-\-" | wc | awk '{print $1}') 
  echo "Number of jobs = "$nJobs 
  
  echo "Number of files= "$nfiles
  cat $tmp_file2 | grep -v "\-\-" | sed "s:......N: N:" | sed "s:......Y: Y:" | sort | uniq -c
 

  echo '--------------------------------------------------------------------------------------------'

}

list(){


if [ "`cat $crab_cfg|grep 'publish_data '|sed 's# ##g'|sed 's#publish_data=##g'`" == "1" ];then
  file_pattern=`cat $crab_cfg|grep 'publish_data_name'|sed 's# ##g'|sed 's#publish_data_name=##g'`
  t2dir=$pnfs_base_dir/$file_pattern/$file_pattern
  t2dir=$t2dir/`ls $t2dir`
  file_pattern=$file_pattern"_"
fi

list_done=`cat $crab_status_output|sed -n -e '/Jobs Done/,+3p'|grep "List of jobs:"|sed 's/.*: //'`

#echo "file_pattern: $file_pattern"
#echo "t2dir: $t2dir"
#echo "list_done: $list_done"

files=""
for file in `ls $t2dir`;do
  file=`echo $file|sed "s#$file_pattern##"|sed 's#_.*##'`
  files="$files $file"
  #echo $file
done
#echo $files
#exit

make_list

list_to_resubmit=""
list_to_getoutput=""
for n1 in $list_done_new;do
  found=0
  for n2 in $files;do
    #echo "n1,n2: $n1,$n2"
    if [ $n1 -eq $n2 ];then
      list_to_getoutput="$list_to_getoutput,$n1"
      found=1
      break
    fi  
  done
  if [ $found -eq 0 ];then
    list_to_resubmit="$list_to_resubmit,$n1"
  fi  
done


if [ "$list_to_resubmit" != "" ];then
  echo "  crab -forceResubmit $list_to_resubmit"|sed 's#forceResubmit ,#forceResubmit #'
fi
if [ "$list_to_getoutput" != "" ];then
  echo "  crab -getoutput $list_to_getoutput"|sed 's#getoutput ,#getoutput #'
fi

}

make_list(){
  list_done_new=""
  list_done=`echo $list_done|sed 's#,# #g'`
  #echo $list_done
  for n in $list_done;do
    n=`echo $n|sed 's#-# #'`
    if [ `n_el $n` -gt 1 ];then
      list_done_new="$list_done_new `seq $n`"
    else
      list_done_new="$list_done_new $n"
    fi
  done
  #echo $list_done_new

}

n_el(){
  echo $#
}

add_to_printout(){
  while [ -f $autocrab_path/.crabstat_lock_printout ];do
    wait 1
  done
  touch $autocrab_path/.crabstat_lock_printout
  cat $1
  rm -f $autocrab_path/.crabstat_lock_printout
}

ctrl_c(){
  echo "Trapped ctrl-c, killing all pids ($pids_all) and exit ..."
  kill $pids_all
}


########################
#    READING OPTIONS   #
########################

db=0
info=0
fromLog=0
v=1

for arg in $* ; do
  
  case $arg in    
     -log)         fromLog=1 ; shift  ;;
     -db)          db=1  ;;
     -info)        info=1  ;;
     -v)           v=$2 ; shift ; shift ;;
     -clear)       clear ;;
     -help)        usage ;;
     -h)           usage ;;
  esac

done


lock
source ~/.bashrc > /dev/null 2>&1

if [ "$CMSSW_BASE" == "" ];then
  echo "You need to enable a cmssw release and do \"cmsenv\" !!"
  clear
fi

#ginit > /dev/null 2> /dev/null
if [ $db -eq 1 ];then set_vars ; print_db
elif [ $info -eq 1 ];then set_vars ; print_info
else set_vars ; get_all_jobs ; start_all_status ; fi

if [ "$v" == "" ];then echo "Wrong -v value. Put either 0 or 1 !!"; fi

clear
