#!/bin/bash

###  COLORS
BLUE='\033[1;34m'
CYAN='\033[1;36m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YEL='\033[1;33m'
YEL=$BLUE
DEF='\033[0;m'

trap ctrl_c INT

autocrab_path=`dirname $0`/..

usage(){
  cat $autocrab_path/man/crastat.man
  exit
}


lock(){
  if [ -f $autocrab_path/.lock_crabstat ];then
    echo "Another instance of crabstat is already running, so wait for it to finish !"
    echo "In case it is really not the case (like you previously killed it), do a \"crabstat -clear\""
    exit
  else
    touch $autocrab_path/.lock_crabstat
  fi
}

unlock(){
  rm -f $autocrab_path/.lock_crabstat
}

clear(){
  unlock
  
  rm -f $autocrab_path/.crabstat_*
  exit
}

set_vars(){

  username=`whoami`
  tmp_file='/tmp/ongocrabjob.'$username
  tmp_file2='/tmp/ongocrabjob2.'$username
  touch $tmp_file

  autosub_db=`dirname $0`'/../config/autosub.conf'
  ongoing_db=`dirname $0`'/../'`( cat $autosub_db | grep ongoing_db | awk '{print $2}' )`

  workdir=$HOME'/'`( cat $autosub_db | grep workdir_crab | awk '{print $2}' )`
  jobdir_crab=$HOME'/'`( cat $autosub_db | grep jobdir_crab | awk '{print $2}' )`



}

print_db(){
  echo -e "Printing Ongoing Jobs in DB ==>"

  get_all_jobs
  
  for jobtmp in $jobs ; do
    get_job $jobtmp
    
    echo -e "\n              ####################################################"
    echo -e "$basedir$uidir"
  done
  
}

get_all_jobs(){
  cd $workdir
  jobs=`( cat $ongoing_db | grep -v "#" | sed 's: :###:g' )`
  njobs=`cat $ongoing_db | grep -v "#"|wc -l`
  basedir=$jobdir_crab
}

get_job(){
  uidir=`(echo $1 | awk -F'###' '{print $3}')`   
  type=`(echo $1 | awk -F'###' '{print $4}')`
  t2dir=`echo "/pnfs/iihe/cms/store/user/$username/data/$uidir" | awk -F'/ui' '{print $1}'`
  nfiles=-1
  if [ -d $t2dir ];then nfiles=`ls $t2dir|wc -l`;fi 
}

start_all_status(){
  i=0
  for job in $jobs ; do
    get_job $job

    print_job_status &
    
    pid=$!
    all_pids="$all_pids $pid"
    
    i=`expr $i + 1`
    
  done
  wait $all_pids
}

get_status_from_log(){
  log=$uidir/log/crab.log
  cat $log > $tmp_file1
  
  while [ `cat $tmp_file1|wc -l` -ne `cat $tmp_file2|wc -l` ];do
    cat $tmp_file2 > $tmp_file1
    cat $tmp_file1 | sed '1,/Checking the / d' > $tmp_file2
  done
  
  cat $tmp_file2
  
  exit
}

print_job_status(){
  stat_file=$autocrab_path/.crabstat_$i
  parsed_file=$autocrab_path/.crabstat_parsed_$i
  tmp_file1=$autocrab_path/.crabstat_tmp1_$i
  tmp_file2=$autocrab_path/.crabstat_tmp2_$i
  touch $parsed_file $tmp_file1 $tmp_file2
  
  if [ $type = "GRID" ]; then
    if [ $fromLog -eq 0 ];then
      crab -status -c $basedir$uidir > $stat_file
    else
      get_status_from_log > $stat_file
    fi
  else
    cd $basedir$uidir
    crab -status  > $stat_file
    cat $stat_file
  fi
  
  
  parse_xav > $parsed_file
  add_to_printout $parsed_file
}

parse_status(){
  cat $stat_file
}

parse_xav(){

  echo $uidir
  echo '--------------------------------------------------------------------------------------------'
  
  # Set loop separator to end of line
  BAKIFS=$IFS
  IFS=$(echo -en "\n\b")
  exec 3<&0
  exec 0<"$stat_file"
  start=0
  while read -r line
  do
    line2='AA'$line
    if [ $line2 = 'AA' ];then
      start=0
    fi
    if [ $start = 1 ];then
      echo $line >> $tmp_file2
    fi
    if [ $line2 = 'AA----- --- ----------------- ------------  ---------- ----------- ---------' ];then
#   if [ $line2 = 'AA--------------------------------------------------------------------------------------------' ];then
      start=1
    fi  
  done
  exec 0<&3
  # restore $IFS which was used to determine what the field separators are
  IFS=$BAKIFS
  
  nJobs=$(cat $tmp_file2 | grep -v "\-\-" | wc | awk '{print $1}') 
  echo "Number of jobs = "$nJobs 
  
  echo "Number of files= "$nfiles
  cat $tmp_file2 | grep -v "\-\-" | sed "s:......N: N:" | sed "s:......Y: Y:" | sort | uniq -c
 

  echo '--------------------------------------------------------------------------------------------'

}

add_to_printout(){
  while [ -f $autocrab_path/.crabstat_lock_printout ];do
    wait 1
  done
  touch $autocrab_path/.crabstat_lock_printout
  cat $1
  rm -f $autocrab_path/.crabstat_lock_printout
}

ctrl_c(){
  kill $pids_all
}


########################
#    READING OPTIONS   #
########################

db=0
fromLog=0

for arg in $* ; do
  
  case $arg in    
     -log)         fromLog=1  ;;
     -db)          db=1  ;;
     -clear)       clear ;;
     -help)        usage ;;
     -h)           usage ;;
     *)            usage ;;
  esac

done


lock
source ~/.bashrc > /dev/null 2>&1
#ginit > /dev/null 2> /dev/null
if [ $# -eq 0 ]; then set_vars ; get_all_jobs ; start_all_status ; fi
if [ $db -eq 1 ];then set_vars ; print_db ; fi

clear
